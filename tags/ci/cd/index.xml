<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CI/CD on StackStorm</title><link>https://stackstorm.github.io/stackstorm.com/tags/ci/cd/</link><description>Recent content in CI/CD on StackStorm</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://stackstorm.github.io/stackstorm.com/tags/ci/cd/index.xml" rel="self" type="application/rss+xml"/><item><title>CI Using StackStorm On Top Of GitHub, Docker And DockerHub</title><link>https://stackstorm.github.io/stackstorm.com/2015/05/27/ci-using-stackstorm-on-top-of-github-docker-and-dockerhub/</link><pubDate>Wed, 27 May 2015 18:28:39 +0000</pubDate><guid>https://stackstorm.github.io/stackstorm.com/2015/05/27/ci-using-stackstorm-on-top-of-github-docker-and-dockerhub/</guid><description>&lt;p>&lt;strong>May 27, 2015&lt;/strong>&lt;/p>
&lt;p>&lt;em>by Lakshmi Kannan&lt;/em>&lt;/p>
&lt;p>In this blog post, we cover CI part of CICD with Docker as an example. At a high level, this blog post will demonstrate how to create a docker image and push it to a registry on every commit to a github repo. You have probably read our own James Fryman’s excellent &lt;!-- raw HTML omitted -->blog post&lt;!-- raw HTML omitted --> on continuous delivery with StackStorm in a more traditional environment. If not, I highly recommend reading it. Also, this recent &lt;!-- raw HTML omitted -->blog post&lt;!-- raw HTML omitted --> from docker is a great introduction to using docker in continuous delivery. Before diving into the details, below is some motivation for switching to container based immutable infrastructure.&lt;/p>
&lt;h2 id="a-classanchor-stylecolor-4183c4-hrefhttpsgistgithubcomlakshmi-kannan2b95e6bae7dc4ed8c6c7motivation-relnoreferrer-nameuser-content-motivationamotivation">&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->Motivation&lt;/h2>
&lt;p>As Michael Dehaan of Ansible fame notes, &lt;!-- raw HTML omitted -->immutable infrastructure is the way of the future&lt;!-- raw HTML omitted -->. Containers (especially, Docker) facilitate this by offering users a way to define their infrastructure through simple files (Dockerfile, for example). The role of orchestration tools changes when dealing with immutable infrastructure. A relevant quote from Michael Dehaan’s blog:&lt;/p>
&lt;!-- raw HTML omitted --></description></item></channel></rss>